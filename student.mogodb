const express = require('express')
const mongoose = require('mongoose')
const bodyParser = require('body-parser')

const app = express()
app.use(bodyParser.json())

// ---------------------- DATABASE CONNECTION ----------------------
mongoose.connect('mongodb://127.0.0.1:27017/studentdb', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.error('Connection Failed:', err))

// ---------------------- MODEL ----------------------
const studentSchema = new mongoose.Schema({
    name: { type: String, required: true },
    age: { type: Number, required: true, min: 5 },
    grade: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    enrolled: { type: Boolean, default: true }
}, { timestamps: true })

const Student = mongoose.model('Student', studentSchema)

// ---------------------- CONTROLLER ----------------------
const studentController = {
    createStudent: async (req, res) => {
        try {
            const student = new Student(req.body)
            const saved = await student.save()
            res.status(201).json(saved)
        } catch (error) {
            res.status(400).json({ message: error.message })
        }
    },
    getAllStudents: async (req, res) => {
        try {
            const students = await Student.find()
            res.json(students)
        } catch (error) {
            res.status(500).json({ message: error.message })
        }
    },
    getStudentById: async (req, res) => {
        try {
            const student = await Student.findById(req.params.id)
            if (!student) return res.status(404).json({ message: 'Student not found' })
            res.json(student)
        } catch (error) {
            res.status(500).json({ message: error.message })
        }
    },
    updateStudent: async (req, res) => {
        try {
            const updated = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true })
            if (!updated) return res.status(404).json({ message: 'Student not found' })
            res.json(updated)
        } catch (error) {
            res.status(400).json({ message: error.message })
        }
    },
    deleteStudent: async (req, res) => {
        try {
            const deleted = await Student.findByIdAndDelete(req.params.id)
            if (!deleted) return res.status(404).json({ message: 'Student not found' })
            res.json({ message: 'Student deleted successfully' })
        } catch (error) {
            res.status(500).json({ message: error.message })
        }
    }
}

// ---------------------- ROUTES ----------------------
app.post('/api/students', studentController.createStudent)
app.get('/api/students', studentController.getAllStudents)
app.get('/api/students/:id', studentController.getStudentById)
app.put('/api/students/:id', studentController.updateStudent)
app.delete('/api/students/:id', studentController.deleteStudent)

// ---------------------- SERVER ----------------------
const PORT = 3000
app.listen(PORT, () => console.log(`Server running on port ${PORT}`))
